build/android/jni/src/ct.c:	jlc->ctrl.h = _jlc->ct.heldDown;
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown) {
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown && (((_jlc->ct.msy>.4f * jl_gl_ar(jlc)) &&
build/android/jni/src/ct.c:			(_jlc->ct.msy<.6f * jl_gl_ar(jlc))) &&
build/android/jni/src/ct.c:			((_jlc->ct.msx>.4f) && (_jlc->ct.msx<.6f))))
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown && (((_jlc->ct.msx>.6f) && (_jlc->ct.msx<.8f)) &&
build/android/jni/src/ct.c:			((_jlc->ct.msy * jl_gl_ar(jlc)>.2f) &&
build/android/jni/src/ct.c:			(_jlc->ct.msy * jl_gl_ar(jlc)<.8f))))
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown && (((_jlc->ct.msx<.4f) && (_jlc->ct.msx>.2f)) &&
build/android/jni/src/ct.c:			((_jlc->ct.msy>.2f * jl_gl_ar(jlc)) &&
build/android/jni/src/ct.c:			(_jlc->ct.msy<.8f * jl_gl_ar(jlc)))))
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown && (((_jlc->ct.msy<.4f * jl_gl_ar(jlc)) &&
build/android/jni/src/ct.c:			(_jlc->ct.msy>.2f * jl_gl_ar(jlc))) &&
build/android/jni/src/ct.c:			((_jlc->ct.msx>.2f) && (_jlc->ct.msx<.8f))))
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown && (((_jlc->ct.msy>.6f * jl_gl_ar(jlc)) &&
build/android/jni/src/ct.c:			(_jlc->ct.msy<.8f * jl_gl_ar(jlc))) &&
build/android/jni/src/ct.c:			((_jlc->ct.msx>.2f) && (_jlc->ct.msx<.8f))))
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown && (_jlc->ct.msx>.8f)) {
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown && (_jlc->ct.msx<.2f)) {
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown && (_jlc->ct.msy<.2f * jl_gl_ar(jlc))) {
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown && (_jlc->ct.msy>.8f * jl_gl_ar(jlc))) {
build/android/jni/src/ct.c:		if(_jlc->ct.heldDown) {
build/android/jni/src/ct.c:	jlc->ctrl.h = _jlc->ct.menu;
build/android/jni/src/ct.c:	if(_jlc->ct.menu) {
build/android/jni/src/ct.c:		jlc->ctrl.p = 1. * (_jlc->ct.menu != 3);
build/android/jni/src/ct.c:	return _jlc->ct.msx;
build/android/jni/src/ct.c:	return _jlc->ct.msy;
build/android/jni/src/ct.c:	if( _jlc->ct.event.type==SDL_FINGERDOWN ) {
build/android/jni/src/ct.c:		_jlc->ct.msx = _jlc->ct.event.tfinger.x;
build/android/jni/src/ct.c:		_jlc->ct.input.finger = 1;
build/android/jni/src/ct.c:		_jlc->ct.msy = _jlc->ct.event.tfinger.y * jl_gl_ar(_jlc->jlc);
build/android/jni/src/ct.c:		if(_jlc->jlc->smde) {
build/android/jni/src/ct.c:			_jlc->ct.msy = _jlc->ct.msy * 2.;
build/android/jni/src/ct.c:			_jlc->ct.msy -= jl_gl_ar(_jlc->jlc);
build/android/jni/src/ct.c:			if(_jlc->ct.msy < 0.) _jlc->ct.input.finger = 0;
build/android/jni/src/ct.c:	}else if( _jlc->ct.event.type==SDL_FINGERUP ) {
build/android/jni/src/ct.c:		_jlc->ct.input.finger = 0;
build/android/jni/src/ct.c:	}else if( _jlc->ct.event.type==SDL_KEYDOWN || _jlc->ct.event.type==SDL_KEYUP) {
build/android/jni/src/ct.c:		if( _jlc->ct.event.key.keysym.scancode == SDL_SCANCODE_AC_BACK)
build/android/jni/src/ct.c:			_jlc->ct.input.back = (_jlc->ct.event.type==SDL_KEYDOWN); //Back Key
build/android/jni/src/ct.c:			_jlc->ct.input.menu = (_jlc->ct.event.type==SDL_KEYDOWN); //Menu Key
build/android/jni/src/ct.c:	uint8_t isNowDown = _jlc->ct.event.type == SDL_MOUSEBUTTONDOWN;
build/android/jni/src/ct.c:	uint8_t isNowUp = _jlc->ct.event.type == SDL_MOUSEBUTTONUP;
build/android/jni/src/ct.c:		if(_jlc->ct.event.button.button == SDL_BUTTON_LEFT)
build/android/jni/src/ct.c:			_jlc->ct.input.click_left = isNowDown;
build/android/jni/src/ct.c:		else if(_jlc->ct.event.button.button == SDL_BUTTON_RIGHT)
build/android/jni/src/ct.c:			_jlc->ct.input.click_right = isNowDown;
build/android/jni/src/ct.c:		else if(_jlc->ct.event.button.button == SDL_BUTTON_MIDDLE)
build/android/jni/src/ct.c:			_jlc->ct.input.click_middle = isNowDown;
build/android/jni/src/ct.c:	}else if(_jlc->ct.event.wheel.type == SDL_MOUSEWHEEL) {
build/android/jni/src/ct.c:		int32_t x = flip * _jlc->ct.event.wheel.x;
build/android/jni/src/ct.c:		int32_t y = flip * _jlc->ct.event.wheel.y;
build/android/jni/src/ct.c:		if(_jlc->ct.event.wheel.y > 0)
build/android/jni/src/ct.c:			_jlc->ct.input.scroll_up = (y > 0) ? y : -y;
build/android/jni/src/ct.c:		else if(_jlc->ct.event.wheel.y < 0)
build/android/jni/src/ct.c:			_jlc->ct.input.scroll_down = (y > 0) ? y : -y;
build/android/jni/src/ct.c:		if(_jlc->ct.event.wheel.x > 0)
build/android/jni/src/ct.c:			_jlc->ct.input.scroll_right = (x > 0) ? x : -x;
build/android/jni/src/ct.c:		else if(_jlc->ct.event.wheel.x < 0)
build/android/jni/src/ct.c:			_jlc->ct.input.scroll_left = (x > 0) ? x : -x;
build/android/jni/src/ct.c:	if ( _jlc->ct.event.type == SDL_TEXTINPUT) {
build/android/jni/src/ct.c://		printf("%1s\n", &(_jlc->ct.event.text.text[0]));
build/android/jni/src/ct.c:			_jlc->ct.text_input[i] = _jlc->ct.event.text.text[i];
build/android/jni/src/ct.c:		_jlc->ct.read_cursor = 0;
build/android/jni/src/ct.c:	}else if(_jlc->ct.event.type==SDL_WINDOWEVENT) { //Resize
build/android/jni/src/ct.c:		if((_jlc->ct.event.window.event == SDL_WINDOWEVENT_RESIZED) &&
build/android/jni/src/ct.c:			(SDL_GetWindowFromID(_jlc->ct.event.window.windowID) ==
build/android/jni/src/ct.c:				_jlc->dl.displayWindow->w))
build/android/jni/src/ct.c:			main_resz(_jlc, _jlc->ct.event.window.data1,
build/android/jni/src/ct.c:				_jlc->ct.event.window.data2);
build/android/jni/src/ct.c:	_jl_ct_state(&_jlc->ct.heldDown, _jlc->ct.input.finger);
build/android/jni/src/ct.c:	_jl_ct_state(&_jlc->ct.menu, _jlc->ct.input.menu);
build/android/jni/src/ct.c:	_jl_ct_state(&_jlc->ct.heldDown, _jlc->ct.input.click_left);
build/android/jni/src/ct.c:	if(_jlc->ct.getEvents[pevent] == NULL) {
build/android/jni/src/ct.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/ct.c:	_jlc->ct.getEvents[pevent](_jlc->jlc, prun, pno);
build/android/jni/src/ct.c:	if(_jlc->ct.back == 1) jl_sg_exit(_jlc->jlc); // Back Button/Key
build/android/jni/src/ct.c:	while(SDL_PollEvent(&_jlc->ct.event)) _jl_ct_handle_events(_jlc);
build/android/jni/src/ct.c:	_jlc->ct.keys = SDL_GetKeyboardState(NULL);
build/android/jni/src/ct.c:	_jlc->ct.back = jl_ct_key_pressed(_jlc->jlc, SDL_SCANCODE_ESCAPE);
build/android/jni/src/ct.c:	_jl_ct_state(&_jlc->ct.back, _jlc->ct.input.back);
build/android/jni/src/ct.c:	if(_jlc->ct.back == 1) jl_sg_exit(_jlc->jlc);
build/android/jni/src/ct.c:		SDL_GetMouseState(&_jlc->ct.msxi,&_jlc->ct.msyi);
build/android/jni/src/ct.c:		if(_jlc->ct.msxi < _jlc->dl.window.x ||
build/android/jni/src/ct.c:			_jlc->ct.msxi > _jlc->dl.window.x + _jlc->dl.window.w ||
build/android/jni/src/ct.c:			_jlc->ct.msyi < _jlc->dl.window.y ||
build/android/jni/src/ct.c:			_jlc->ct.msyi > _jlc->dl.window.y + _jlc->dl.window.h)
build/android/jni/src/ct.c:			if(!_jlc->ct.sc) {
build/android/jni/src/ct.c:				_jlc->ct.sc = 1;
build/android/jni/src/ct.c:			if(_jlc->ct.sc) {
build/android/jni/src/ct.c:				_jlc->ct.sc = 0;
build/android/jni/src/ct.c:		int32_t mousex = _jlc->ct.msxi - _jlc->dl.window.x;
build/android/jni/src/ct.c:		int32_t mousey = (_jlc->ct.msyi - _jlc->dl.window.y) *
build/android/jni/src/ct.c:			(1 + _jlc->jlc->smde);
build/android/jni/src/ct.c:		_jlc->ct.msx =
build/android/jni/src/ct.c:			((float)(mousex-2)) / jl_dl_getw(_jlc->jlc);
build/android/jni/src/ct.c:		_jlc->ct.msy =
build/android/jni/src/ct.c:			(jl_dl_geth(_jlc->jlc) * (1 + _jlc->jlc->smde));
build/android/jni/src/ct.c:		if(_jlc->jlc->smde && _jlc->ct.msy < 0.) {
build/android/jni/src/ct.c:			_jlc->ct.msy = 0.;
build/android/jni/src/ct.c:			_jlc->ct.heldDown = 0;
build/android/jni/src/ct.c:		if(jl_ct_key_pressed(_jlc->jlc, SDL_SCANCODE_F11) == 1)
build/android/jni/src/ct.c:			jl_dl_togglefullscreen(_jlc->jlc);
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_RETN] = jl_ct_key_retn;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_KEYW] = jl_ct_key_keyw;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_KEYA] = jl_ct_key_keya;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_KEYS] = jl_ct_key_keys;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_KEYD] = jl_ct_key_keyd;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_ARUP] = jl_ct_key_arup;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_ARDN] = jl_ct_key_ardn;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_ARRT] = jl_ct_key_arrt;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_ARLT] = jl_ct_key_arlt;
build/android/jni/src/ct.c://	_jlc->ct.getEvents[JL_CT_COMP_MSXY] = mous_over;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_CLLT] = jl_ct_left_click;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_COMP_MENU] = jl_ct_key_menu;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TCCR] = tuch_cntr;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TFUP] = tuch_frup;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TFDN] = tuch_frdn;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TFRT] = tuch_frrt;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TFLT] = tuch_frlt;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TNUP] = tuch_nrup;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TNDN] = tuch_nrdn;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TNRT] = tuch_nrrt;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TNLT] = tuch_nrlt;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_TOUC] = tuch;
build/android/jni/src/ct.c:	_jlc->ct.getEvents[JL_CT_ANDR_MENU] = jl_ct_key_menu;
build/android/jni/src/ct.c:		_jlc->ct.keyDown[i] = 0;
build/android/jni/src/ct.c:	_jlc->ct.read_cursor = 0;
build/android/jni/src/ct.c:		_jlc->ct.text_input[i] = 0;
build/android/jni/src/ct.c:	_jlc->ct.sc = 0;
build/android/jni/src/ct.c:	_jlc->has.input = 1;
build/android/jni/src/ct.c:	uint8_t rtn = _jlc->ct.text_input[_jlc->ct.read_cursor];
build/android/jni/src/ct.c:	_jlc->ct.read_cursor++;
build/android/jni/src/ct.c:	return _jl_ct_state(&_jlc->ct.keyDown[key], _jlc->ct.keys[key]);
build/android/jni/src/sg.c:	_jlc->jlc->mdec++;
build/android/jni/src/sg.c:	_jlc->sg.mdes = realloc(_jlc->sg.mdes,
build/android/jni/src/sg.c:		(_jlc->jlc->mdec + 1) * sizeof(__sg_mode_t));
build/android/jni/src/sg.c:	_jlc->sg.mdes[mode].tclp[JL_SG_WM_EXIT] = jl_sg_exit;
build/android/jni/src/sg.c:	_jlc->sg.mdes[mode].tclp[JL_SG_WM_UP] = jl_dont;
build/android/jni/src/sg.c:	_jlc->sg.mdes[mode].tclp[JL_SG_WM_DN] = jl_dont;
build/android/jni/src/sg.c:	_jlc->sg.mdes[mode].tclp[JL_SG_WM_TERM] = jl_dont;
build/android/jni/src/sg.c:	_jlc->sg.mdes[mode].tclp[JL_SG_WM_RESZ] = jl_dont;
build/android/jni/src/sg.c:	while(mode >= _jlc->jlc->mdec) _jl_sg_mode_add(_jlc, mode);
build/android/jni/src/sg.c:	_jlc->sg.mdes[mode].tclp[wm] = loop;
build/android/jni/src/sg.c:	_jlc->ct.heldDown = 0;
build/android/jni/src/sg.c:	_jlc->sg.mode.tclp[wm] = loop;
build/android/jni/src/sg.c:		_jlc->sg.mode.tclp[i] = _jlc->sg.mdes[jlc->mode].tclp[i];
build/android/jni/src/sg.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/sg.c:	}else if(data->data[_jlc->sg.init_image_location] == 0) {
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_PROGRESS, "JLPX"); // {
build/android/jni/src/sg.c:	jl_me_copyto(data->data + _jlc->sg.init_image_location, testing,
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "JLPX"); // =
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "header=\"");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, testing);
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "\" @");
build/android/jni/src/sg.c:	jl_io_printi(_jlc->jlc, _jlc->sg.init_image_location);
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, ":error: bad file type:\n:");
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, testing);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "\n:!=\n:");
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, JL_IMG_HEADER);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "\ncouldn't load image #");
build/android/jni/src/sg.c:		jl_io_printi(_jlc->jlc, _jlc->sg.image_id);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/sg.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/sg.c:	uint8_t tester = data->data[_jlc->sg.init_image_location+strlen(JL_IMG_HEADER)];
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "normal quality\n");
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "high quality\n");
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "pic quality\n");
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "png/gif/jpeg etc.\n");
build/android/jni/src/sg.c:		data->curs = _jlc->sg.init_image_location+strlen(JL_IMG_HEADER)+1;
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "File Size = ");
build/android/jni/src/sg.c:		jl_io_printi(_jlc->jlc, FSIZE);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/sg.c:		jl_me_alloc(_jlc->jlc, &img_file, FSIZE, 0);
build/android/jni/src/sg.c:			jl_io_printc(_jlc->jlc, "Couldn't load image: ");
build/android/jni/src/sg.c:			jl_io_printc(_jlc->jlc, IMG_GetError());
build/android/jni/src/sg.c:			jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/sg.c:			jl_sg_kill(_jlc->jlc);
build/android/jni/src/sg.c:		_jlc->sg.init_image_location += FSIZE + 6;
build/android/jni/src/sg.c:		*pixels = jl_me_string_fstrt(_jlc->jlc, pixel_data);
build/android/jni/src/sg.c:		jl_io_offset(_jlc->jlc, JL_IO_MINIMAL, "JLPX");
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "bad file type(must be 1-4) is: ");
build/android/jni/src/sg.c:		jl_io_printi(_jlc->jlc, tester);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/sg.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/sg.c:	jl_me_alloc(_jlc->jlc, (void**)&image, sizeof(jgr_img_t), 0);
build/android/jni/src/sg.c:		image->key[i].r = data->data[_jlc->sg.init_image_location+ki];
build/android/jni/src/sg.c:		image->key[i].g = data->data[_jlc->sg.init_image_location+ki];
build/android/jni/src/sg.c:		image->key[i].b = data->data[_jlc->sg.init_image_location+ki];
build/android/jni/src/sg.c:		image->key[i].a = data->data[_jlc->sg.init_image_location+ki];
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_INTENSE, "JLPX");
build/android/jni/src/sg.c:		image->tex_pixels[i] = data->data[_jlc->sg.init_image_location+ki];
build/android/jni/src/sg.c:	_jlc->sg.init_image_location+=FSIZE+1;
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "JLPX");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "creating texture...\n");
build/android/jni/src/sg.c:	jl_me_alloc(_jlc->jlc, (void**)&tex_pixels, TEXTURE_WH*4, 0);
build/android/jni/src/sg.c:	jl_me_alloc(_jlc->jlc, (void**)&a, 2*sizeof(int), 0);
build/android/jni/src/sg.c:	jl_io_close_block(_jlc->jlc); // } :Close Block "JLPX"
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_PROGRESS, "IMGS");
build/android/jni/src/sg.c:	_jl_sg_load_jlpx(_jlc, _jlc->sg.image_data, &fpixels, &fw, &fh);
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "{IMGS}\n");
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "loaded ");
build/android/jni/src/sg.c:		jl_io_printi(_jlc->jlc, _jlc->sg.image_id);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "images!\n");
build/android/jni/src/sg.c:		_jlc->jlc->info = _jlc->sg.image_id;
build/android/jni/src/sg.c:		jl_io_close_block(_jlc->jlc); //Close Block "IMGS"
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "IL\n");
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "creating image #");
build/android/jni/src/sg.c:		jl_io_printi(_jlc->jlc, _jlc->sg.igid);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "!\n");
build/android/jni/src/sg.c:		jl_gl_maketexture(_jlc->jlc, _jlc->sg.igid,
build/android/jni/src/sg.c:			_jlc->sg.image_id, fpixels, fw, fh);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "created image #");
build/android/jni/src/sg.c:		jl_io_printi(_jlc->jlc, _jlc->sg.igid);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, ":");
build/android/jni/src/sg.c:		jl_io_printi(_jlc->jlc, _jlc->sg.image_id);
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "!\n");
build/android/jni/src/sg.c:		_jlc->sg.image_id++;
build/android/jni/src/sg.c:		jl_io_close_block(_jlc->jlc); //Close Block "IMGS"
build/android/jni/src/sg.c:		jl_io_printc(_jlc->jlc, "IL____\n");
build/android/jni/src/sg.c:	_jlc->sg.init_image_location = 0;
build/android/jni/src/sg.c:	_jlc->sg.image_id= 0; //Reset Image Id
build/android/jni/src/sg.c:	_jlc->sg.igid = gi;
build/android/jni/src/sg.c:	_jlc->sg.image_data = data;
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_PROGRESS, "INIM");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "loading images...\n");
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "INIM");
build/android/jni/src/sg.c:	stringlength = jl_me_string_fnum(_jlc->jlc, data->size);
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "lne ");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, stringlength);
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/sg.c:	jl_io_close_block(_jlc->jlc); //Close Block "INIM"
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "KILL"); // {
build/android/jni/src/sg.c:	if(_jlc->me.status == JL_STATUS_EXIT) {
build/android/jni/src/sg.c:	_jlc->me.status = JL_STATUS_EXIT;
build/android/jni/src/sg.c:	_jl_sg_kill(_jlc->jlc);
build/android/jni/src/sg.c:	_jl_io_kill(_jlc->jlc);
build/android/jni/src/sg.c:	strt error_string = jl_fl_load(jlc, _jlc->fl.paths.errf);
build/android/jni/src/sg.c:	jl_gr_pr_old(jlc, _jlc->sg.bg.up);
build/android/jni/src/sg.c:	jl_gr_pr_old(jlc, _jlc->sg.bg.dn);
build/android/jni/src/sg.c:	_jlc->sg.prev_tick = this_tick;
build/android/jni/src/sg.c:	if((_jlc->sg.changed = ( _jlc->sg.on_time != on_time)))
build/android/jni/src/sg.c:		_jlc->sg.on_time = on_time;
build/android/jni/src/sg.c:	_jlc->sg.processingTimeMillis = this_tick - _jlc->sg.prev_tick;
build/android/jni/src/sg.c:	if(_jlc->sg.processingTimeMillis <= JL_MAIN_SAPT) {
build/android/jni/src/sg.c:			_jlc->sg.processingTimeMillis;
build/android/jni/src/sg.c:		double frames = ((double)_jlc->sg.processingTimeMillis)/1000.;
build/android/jni/src/sg.c:	jl_vec3_t translate = { _jlc->sg.offsx, _jlc->sg.offsy + ytrans, 0. };
build/android/jni/src/sg.c:	_jlc->sg.mode.tclp[lp](jlc);
build/android/jni/src/sg.c:	if(bg == _jlc->sg.bg.dn) _jl_gr_loop(jlc);
build/android/jni/src/sg.c:	_jl_sg_screen_draw(jlc, 0.f, _jlc->sg.bg.up,
build/android/jni/src/sg.c:	_jl_sg_screen_draw(jlc, _jlc->sg.screen_height, _jlc->sg.bg.dn,
build/android/jni/src/sg.c:	_jl_sg_screen_draw(jlc, 0.f, _jlc->sg.bg.dn, jlc->loop);
build/android/jni/src/sg.c:	_jlc->sg.loop(_jlc->jlc);
build/android/jni/src/sg.c:	const float shifty = _jlc->dl.shifty / 2.;
build/android/jni/src/sg.c:	const float rcrdw = 1. - _jlc->dl.shiftx;
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "{{{ 2 Screen init\n");
build/android/jni/src/sg.c:	jl_gr_vos_rec(jlc, _jlc->sg.bg.up, rcrd, rclr_up, 0);
build/android/jni/src/sg.c:	jl_gr_pr_new(jlc, _jlc->sg.bg.up, _jlc->dl.current.w);
build/android/jni/src/sg.c:	jl_gr_vos_rec(jlc, _jlc->sg.bg.dn, rcrd, rclr_dn, 0);
build/android/jni/src/sg.c:	jl_gr_pr_new(jlc, _jlc->sg.bg.dn, _jlc->dl.current.w);
build/android/jni/src/sg.c:	_jlc->sg.loop = _jl_sg_loop_ds;
build/android/jni/src/sg.c:	_jlc->sg.bg.up->pr->ar = _jlc->dl.aspect / 2.;
build/android/jni/src/sg.c:	_jlc->sg.bg.dn->pr->ar = _jlc->dl.aspect / 2.;
build/android/jni/src/sg.c:	_jlc->sg.screen_height = rcrd.h;
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "{{{ 2 Screen init'd\n");
build/android/jni/src/sg.c:	const float shifty = _jlc->dl.shifty;
build/android/jni/src/sg.c:	const float rcrdw = 1. - _jlc->dl.shiftx;
build/android/jni/src/sg.c:	jl_gr_vos_rec(jlc, _jlc->sg.bg.dn, rcrd, rclr_bg, 0);
build/android/jni/src/sg.c:	jl_gr_pr_new(jlc, _jlc->sg.bg.dn, _jlc->dl.current.w);
build/android/jni/src/sg.c:	_jlc->sg.loop = _jl_sg_loop_ss;
build/android/jni/src/sg.c:	_jlc->sg.bg.dn->pr->ar = _jlc->dl.aspect;
build/android/jni/src/sg.c:	_jlc->sg.screen_height = rcrd.h;
build/android/jni/src/sg.c:	_jlc->sg.offsx = _jlc->dl.shiftx/2.;
build/android/jni/src/sg.c:	_jlc->sg.offsy = (((_jlc->dl.shifty / (1. + isDoubleScreen)) *
build/android/jni/src/sg.c:	jl_gl_pr_scr_set(_jlc, _jlc->sg.bg.dn);
build/android/jni/src/sg.c:	_jlc->jlc->errf = JL_ERR_NERR;
build/android/jni/src/sg.c:	_jlc->jlc->psec = 0.f;
build/android/jni/src/sg.c:	_jlc->jlc->mode = 0;
build/android/jni/src/sg.c:	_jlc->jlc->mdec = 0;
build/android/jni/src/sg.c:	_jlc->sg.mdes = NULL;
build/android/jni/src/sg.c:	_jlc->jlc->loop = JL_SG_WM_TERM;
build/android/jni/src/sg.c:	_jlc->sg.prev_tick = 0;
build/android/jni/src/sg.c:	_jlc->gl.textures = NULL;
build/android/jni/src/sg.c:	_jlc->gl.tex.uniforms.textures = NULL;
build/android/jni/src/sg.c:	_jlc->sg.image_id = 0; //Reset Image Id
build/android/jni/src/sg.c:	_jlc->sg.igid = 0; //Reset Image Group Id
build/android/jni/src/sg.c:	_jlc->gl.allocatedg = 0;
build/android/jni/src/sg.c:	_jlc->gl.allocatedi = 0;
build/android/jni/src/sg.c:	jl_sg_add_image__(_jlc->jlc,
build/android/jni/src/sg.c:		(void*)jl_fl_get_resloc(_jlc->jlc, JL_MAIN_DIR, JL_MAIN_MEF),
build/android/jni/src/sg.c:	for(i = 0; i < JL_SG_WM_MAX; i++) _jlc->sg.mode.tclp[i] = jl_dont;
build/android/jni/src/sg.c:	_jlc->sg.bg.up = jl_gl_vo_make(_jlc->jlc, 1);
build/android/jni/src/sg.c:	_jlc->sg.bg.dn = jl_gl_vo_make(_jlc->jlc, 1);
build/android/jni/src/sg.c:	_jlc->jlc->smde = 1;
build/android/jni/src/sg.c:	jl_sg_init_ds_(_jlc->jlc);
build/android/jni/src/sg.c:	jl_gl_pr_scr_set(_jlc, _jlc->sg.bg.dn);
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "turning on display....\n");
build/android/jni/src/sg.c:	_jlc->has.graphics = 1; //Graphics Now Available For Use
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "printing to the screen....\n");
build/android/jni/src/sg.c:	jl_gr_draw_msge(_jlc->jlc, "LOADING JLLIB....", 0, 0, 0);
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "offsetting....\n");
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_MINIMAL, "JLLB"); //"JLLB" to SIMPLE
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "started up display ");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc,
build/android/jni/src/sg.c:		jl_me_string_fnum_tmp(_jlc->jlc, _jlc->dl.full_w));
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "x");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc,
build/android/jni/src/sg.c:		jl_me_string_fnum_tmp(_jlc->jlc, _jlc->dl.full_h));
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/sg.c:	_jl_sg_resz(_jlc->jlc);
build/android/jni/src/sg.c:	_jl_gr_resz(_jlc->jlc);	
build/android/jni/src/sg.c:	_jlc->sg.mode.tclp[JL_SG_WM_RESZ](_jlc->jlc);
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initializing DL...\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initializing FL...\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initializing SG...\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initializing GL...\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initialized GL!\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initializing GR....\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initializing SG....\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Still Initializing GR....\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initialized GR!\n");
build/android/jni/src/sg.c:	jl_main_resz_jl(_jlc, _jlc->dl.full_w, _jlc->dl.full_h);
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Completed First Frame!\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initializing CT...\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initialized CT!\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initialized SG!\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initialized FL!\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initializing AU....\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initialized AU!\n");
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "STARTING JL_lib Version "JL_VERSION"....\n");
build/android/jni/src/sg.c:	hack_user_init(_jlc->jlc);
build/android/jni/src/sg.c:	_jlc->sg.mode.tclp[JL_SG_WM_RESZ](_jlc->jlc);
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "JLLB"); //"JLLB" to SIMPLE
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Init5...\n");
build/android/jni/src/sg.c:	jl_io_offset(_jlc->jlc, JL_IO_MINIMAL, "JLLB"); //"JLLB" to MINIMAL
build/android/jni/src/sg.c:	jl_io_printc(_jlc->jlc, "Initialized!\n");
build/android/jni/src/sg.c:		_jlc->gl.cp = NULL;
build/android/jni/src/sg.c:		_jlc->jlc->psec = _jl_sg_seconds_passed(_jlc);
build/android/jni/src/sg.c:	if(_jlc->jlc->mdec) _main_loop(_jlc);
build/android/jni/src/me.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/me.c:	jl_me_clr((void*)_jlc->me.temp_buff, 30);
build/android/jni/src/me.c:	sprintf((void*)_jlc->me.temp_buff, "%d", a);
build/android/jni/src/me.c:	return (void*)_jlc->me.temp_buff;
build/android/jni/src/me.c:	jl_me_clr((void*)_jlc->me.temp_buff, 30);
build/android/jni/src/me.c:	sprintf((void*)_jlc->me.temp_buff, format, var);
build/android/jni/src/me.c:	strncat(string, (void*)_jlc->me.temp_buff, n - strlen(string));
build/android/jni/src/me.c:	void *rtn = _jlc->me.tmp_ptr[which];
build/android/jni/src/me.c:	_jlc->me.tmp_ptr[which] = tmp_ptr;
build/android/jni/src/me.c:	_jlc->cprg = 0;
build/android/jni/src/me.c:	_jlc->jlc = NULL;
build/android/jni/src/me.c:	_jl_me_init_alloc((void**)&(_jlc->jlc), sizeof(jl_t));
build/android/jni/src/me.c:	_jlc->jlc->_jlc = _jlc;
build/android/jni/src/me.c:	_jlc->has.graphics = 0;
build/android/jni/src/me.c:	_jlc->has.fileviewer = 0;
build/android/jni/src/me.c:	_jlc->has.filesys = 0;
build/android/jni/src/me.c:	_jlc->has.input = 0;
build/android/jni/src/me.c:	_jlc->me.status = JL_STATUS_GOOD;
build/android/jni/src/me.c:	for(i = 0; i < 16; i++) _jlc->me.tmp_ptr[i] = NULL;
build/android/jni/src/me.c:		_jlc->jlc, ((jvct_t *)(_jlc->jlc->_jlc))->sg.usrd,
build/android/jni/src/me.c:		_jlc, _jlc->jlc->_jlc);*/
build/android/jni/src/gr.c:		_jlc->gr.vos.whole_screen = jl_gl_vo_make(_jlc->jlc, 1);
build/android/jni/src/gr.c:		if(_jlc->jlc->loop == JL_SG_WM_UP) {
build/android/jni/src/gr.c:			_jlc->jlc->loop = JL_SG_WM_DN;
build/android/jni/src/gr.c:			_jlc->jlc->loop = JL_SG_WM_UP;
build/android/jni/src/gr.c:		if(_jlc->gr.textbox_string->curs)
build/android/jni/src/gr.c:			_jlc->gr.textbox_string->curs--;
build/android/jni/src/gr.c:		if(_jlc->gr.textbox_string->curs < _jlc->gr.textbox_string->size)
build/android/jni/src/gr.c:			_jlc->gr.textbox_string->curs++;
build/android/jni/src/gr.c:		jl_taskbar_t* ctx = _jlc->gr.taskbar->data.ctx;
build/android/jni/src/gr.c:		jl_taskbar_t* ctx = _jlc->gr.taskbar->data.ctx;
build/android/jni/src/gr.c:		jl_gr_draw_text(jlc, _jlc->dl.windowTitle[0],
build/android/jni/src/gr.c:		jl_gr_draw_text(jlc, _jlc->dl.windowTitle[1],
build/android/jni/src/gr.c:		if(!_jlc->sg.on_time)
build/android/jni/src/gr.c:			sprintf(_jlc->dl.windowTitle[1],"%f",(float)jlc->psec);
build/android/jni/src/gr.c:		jl_gr_draw_icon__(jlc, 0, JL_IMGI_ICON, _jlc->sg.on_time ?
build/android/jni/src/gr.c:		jl_taskbar_t* ctx = _jlc->gr.taskbar->data.ctx;
build/android/jni/src/gr.c:		if(_jlc->sg.changed) ctx->redraw = 1;
build/android/jni/src/gr.c:		jl_taskbar_t *ctx = _jlc->gr.taskbar->data.ctx;
build/android/jni/src/gr.c:				jl_gr_sp_rdr(jlc, _jlc->gr.taskbar);
build/android/jni/src/gr.c:		jl_taskbar_t *ctx = _jlc->gr.taskbar->data.ctx;
build/android/jni/src/gr.c:		jl_gr_sp_rsz(jlc, _jlc->gr.taskbar);
build/android/jni/src/gr.c:		if(_jlc->ct.msy >= .1) {
build/android/jni/src/gr.c:		ctx = _jlc->gr.taskbar->data.ctx;
build/android/jni/src/gr.c:		u8_t selected = (m_u8_t)((1. - _jlc->ct.msx) / .1);
build/android/jni/src/gr.c:			if(ctx->redraw) jl_gr_sp_rdr(jlc, _jlc->gr.taskbar);
build/android/jni/src/gr.c:		jl_taskbar_t* ctx = _jlc->gr.taskbar->data.ctx;
build/android/jni/src/gr.c:		jl_gr_sp_drw(jlc, _jlc->gr.taskbar);
build/android/jni/src/gr.c:		jl_vo_t *icon = jl_gl_vo_make(_jlc->jlc, 2);
build/android/jni/src/gr.c:		_jlc->gr.taskbar = jl_gr_sp_new(
build/android/jni/src/gr.c:			_jlc->jlc, rc, _jl_gr_taskbar_draw,
build/android/jni/src/gr.c:		ctx = _jlc->gr.taskbar->data.ctx;
build/android/jni/src/gr.c:		jl_gr_vos_rec(_jlc->jlc, &icon[0], rc_shadow, shadow_color, 0);
build/android/jni/src/gr.c:		jl_gr_vos_image(_jlc->jlc, &icon[1], rc_icon, 0, 1,
build/android/jni/src/gr.c:			jl_gr_sp_rdr(_jlc->jlc, _jlc->gr.taskbar);
build/android/jni/src/gr.c:		jl_vo_t *mouse = jl_gl_vo_make(_jlc->jlc, 1);
build/android/jni/src/gr.c:			jl_gr_vos_image(_jlc->jlc, &(mouse[0]), rc, 0,
build/android/jni/src/gr.c:		_jlc->jlc->mouse = jl_gr_sp_new(
build/android/jni/src/gr.c:			_jlc->jlc, rc, jl_gr_sp_dont,
build/android/jni/src/gr.c:			((jl_sprite_t*)_jlc->jlc->mouse)->data.ctx = mouse;
build/android/jni/src/gr.c:			((jl_sprite_t*)_jlc->jlc->mouse)->data.ctx = NULL;
build/android/jni/src/gr.c:		jl_gr_vos_image(jlc, _jlc->gr.vos.whole_screen, rc,
build/android/jni/src/gr.c:		jl_gr_draw_vo(jlc, _jlc->gr.vos.whole_screen, NULL);
build/android/jni/src/gr.c:		if(pv == NULL) pv = _jlc->gl.temp_vo;
build/android/jni/src/gr.c:		u16_t res = (_jlc->gl.cp ? _jlc->gl.cp->w : _jlc->dl.full_w)
build/android/jni/src/gr.c:		jl_vo_t* vo = _jlc->gl.temp_vo;
build/android/jni/src/gr.c:		if(_jlc->has.input) jl_ct_quickloop_(jlc->_jlc);
build/android/jni/src/gr.c:		_jlc->gr.popup.window_name = name;
build/android/jni/src/gr.c:		_jlc->gr.popup.message = message;
build/android/jni/src/gr.c:		_jlc->gr.popup.btns = btns;
build/android/jni/src/gr.c:			jl_gr_vos_rec(jlc, _jlc->gl.temp_vo, rc, glow_color, 0);
build/android/jni/src/gr.c:			jl_gr_draw_vo(jlc, _jlc->gl.temp_vo, NULL);
build/android/jni/src/gr.c:		_jlc->gr.textbox_string = *string;
build/android/jni/src/gr.c:		if(_jlc->gr.menuoverlay == jl_gr_sp_dont)
build/android/jni/src/gr.c:			_jlc->gr.menuoverlay = _jl_gr_taskbar_loop;
build/android/jni/src/gr.c:			_jlc->gr.menuoverlay = jl_gr_sp_dont;
build/android/jni/src/gr.c:		jl_taskbar_t* ctx = _jlc->gr.taskbar->data.ctx;
build/android/jni/src/gr.c:		if(!_jlc->fl.inloop) _jlc->gr.menuoverlay(jlc, NULL);
build/android/jni/src/gr.c:		jl_gr_draw_msge(_jlc->jlc, NULL, 0, 0, 0);
build/android/jni/src/gr.c:		_jlc->jlc->fontcolor[0] = 0;
build/android/jni/src/gr.c:		_jlc->jlc->fontcolor[1] = 0;
build/android/jni/src/gr.c:		_jlc->jlc->fontcolor[2] = 0;
build/android/jni/src/gr.c:		_jlc->jlc->fontcolor[3] = 255;
build/android/jni/src/gr.c:		_jlc->jlc->font = (jl_font_t)
build/android/jni/src/gr.c:			{ 0, JL_IMGI_FONT, 0, _jlc->jlc->fontcolor, .04 };
build/android/jni/src/gr.c:		jl_gr_draw_msge(_jlc->jlc, "LOADING JL_LIB GRAPHICS...",
build/android/jni/src/gr.c:		jl_gr_draw_msge(_jlc->jlc, "LOADED JL_LIB GRAPHICS!",
build/android/jni/src/gr.c:		jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "GRIN");
build/android/jni/src/gr.c:		mouse = _jlc->jlc->mouse;
build/android/jni/src/gr.c:		_jlc->gr.menuoverlay = _jl_gr_taskbar_loop;
build/android/jni/src/gr.c:		jl_io_close_block(_jlc->jlc); //Close Block "GRIN"
build/android/jni/src/au.c:	jl_io_offset(_jlc->jlc, JL_IO_PROGRESS, "AUDI");
build/android/jni/src/au.c:	jl_io_offset(_jlc->jlc, JL_IO_PROGRESS, "LOAD");
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "loading music....\n");
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "loading music ");
build/android/jni/src/au.c:	jl_io_printi(_jlc->jlc, IDinStack);
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "/");
build/android/jni/src/au.c:	jl_io_printi(_jlc->jlc, _jlc->au.smax);
build/android/jni/src/au.c:	jl_io_offset(_jlc->jlc, JL_IO_MINIMAL, "LOAD"); //INTENSE
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "ausize: ");
build/android/jni/src/au.c:	jl_io_printi(_jlc->jlc, dataSize);
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "audata: \"");
build/android/jni/src/au.c:	jl_io_printt(_jlc->jlc, 4, data);
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "\"\n");
build/android/jni/src/au.c:	_jlc->au.jmus[IDinStack]._MUS =
build/android/jni/src/au.c:	_jlc->au.jmus[IDinStack]._VOL = volumeChange;
build/android/jni/src/au.c:	jl_io_offset(_jlc->jlc, JL_IO_MINIMAL, "LOAD");
build/android/jni/src/au.c:	if(_jlc->au.jmus[IDinStack]._MUS == NULL) {
build/android/jni/src/au.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/au.c:		jl_io_printc(_jlc->jlc, "loaded music ");
build/android/jni/src/au.c:		jl_io_printi(_jlc->jlc, IDinStack);
build/android/jni/src/au.c:		jl_io_printc(_jlc->jlc, "/");
build/android/jni/src/au.c:		jl_io_printi(_jlc->jlc, _jlc->au.smax);
build/android/jni/src/au.c:		jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/au.c:	jl_io_close_block(_jlc->jlc); //Close Block "LOAD"
build/android/jni/src/au.c:	jl_io_close_block(_jlc->jlc); //Close Block "AUDI"
build/android/jni/src/au.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "AUDI");
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "allocating music space:");
build/android/jni/src/au.c:	jl_io_printi(_jlc->jlc, PMusMax);
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/au.c:		_jlc->au.jmus = malloc(PMusMax * sizeof(__mixr_jmus));
build/android/jni/src/au.c:		_jlc->au.smax = PMusMax;
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "allocated music space!\n");
build/android/jni/src/au.c:	jl_io_close_block(_jlc->jlc); //Close Block "AUDI"
build/android/jni/src/au.c:	Mix_VolumeMusic(_jlc->au.jmus[_jlc->au.idis]._VOL);
build/android/jni/src/au.c:	Mix_FadeInMusic(_jlc->au.jmus[_jlc->au.idis]._MUS, 1, _jlc->au.sofi * 1000);
build/android/jni/src/au.c:	_jlc->au.idis = p_IDinStack;
build/android/jni/src/au.c:	_jlc->au.sofi = p_secondsOfFadeIn;
build/android/jni/src/au.c:	_jlc->au.sofo = p_secondsOfFadeOut;
build/android/jni/src/au.c:		jl_au_mus_halt(_jlc->au.sofo);
build/android/jni/src/au.c:	if ( !Mix_PlayingMusic() && (_jlc->au.idis!=UINT32_MAX)) {
build/android/jni/src/au.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "AUDI");
build/android/jni/src/au.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "LOAD");
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "meanwhile....\n");
build/android/jni/src/au.c:		jl_io_printi(_jlc->jlc, size);
build/android/jni/src/au.c:		jl_io_printc(_jlc->jlc,"getting data....\n");
build/android/jni/src/au.c:		jl_io_printc(_jlc->jlc,"jl_au_load() we are at [data + ");
build/android/jni/src/au.c:		jl_io_printi(_jlc->jlc,fil);
build/android/jni/src/au.c:		jl_io_printc(_jlc->jlc,"\n");
build/android/jni/src/au.c:	_jlc->jlc->info = fid;
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "loaded music!\n");
build/android/jni/src/au.c:	jl_io_close_block(_jlc->jlc); //Close Block "LOAD"
build/android/jni/src/au.c:	jl_io_close_block(_jlc->jlc); //Close Block "AUDI"
build/android/jni/src/au.c:	_jl_au_print_openblock(_jlc->jlc);
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "initailizing audio...\n");
build/android/jni/src/au.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/au.c:		jl_io_printc(_jlc->jlc, "audio has been set.\n");
build/android/jni/src/au.c:	jl_au_add_audio(_jlc->jlc, 
build/android/jni/src/au.c:		jl_fl_get_resloc(_jlc->jlc, JL_MAIN_DIR, JL_MAIN_MEF), 0);
build/android/jni/src/au.c:	_jlc->au.smax = 0;
build/android/jni/src/au.c:	_jlc->au.idis = UINT32_MAX; 
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "Loaded audiostuffs!\n");
build/android/jni/src/au.c:	jl_io_close_block(_jlc->jlc);
build/android/jni/src/au.c:	_jl_au_print_openblock(_jlc->jlc);
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "Quiting....\n");
build/android/jni/src/au.c:	for(i = 0; i < _jlc->au.smax; i++) {
build/android/jni/src/au.c:		Mix_FreeMusic(_jlc->au.jmus[i]._MUS);
build/android/jni/src/au.c:	free(_jlc->au.jmus);
build/android/jni/src/au.c:	jl_io_printc(_jlc->jlc, "Quit Successfully!\n");
build/android/jni/src/au.c:	jl_io_close_block(_jlc->jlc);
build/android/jni/src/dl.c:	_jl_dl_fscreen(_jlc, !_jlc->dl.fullscreen);
build/android/jni/src/dl.c:	return _jlc->dl.current.w;
build/android/jni/src/dl.c:	return _jlc->dl.current.h;
build/android/jni/src/dl.c:	_jlc->dl.fullscreen = !!a;
build/android/jni/src/dl.c:	if(SDL_SetWindowFullscreen(_jlc->dl.displayWindow->w,
build/android/jni/src/dl.c:		JL_DL_FULLSCREEN * _jlc->dl.fullscreen))
build/android/jni/src/dl.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/dl.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "ISDL"); // {
build/android/jni/src/dl.c:	jl_io_printc(_jlc->jlc, "Starting up...\n");
build/android/jni/src/dl.c:	jl_io_printc(_jlc->jlc, "input...\n");
build/android/jni/src/dl.c:	jl_io_close_block(_jlc->jlc); // }
build/android/jni/src/dl.c:	if(SDL_GetCurrentDisplayMode(0, &_jlc->dl.current)) {
build/android/jni/src/dl.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/dl.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "CURD"); // {
build/android/jni/src/dl.c:	jl_io_printc(_jlc->jlc,
build/android/jni/src/dl.c:		jl_me_string_fnum(_jlc->jlc, _jlc->dl.current.w));
build/android/jni/src/dl.c:	jl_io_printc(_jlc->jlc, ",");
build/android/jni/src/dl.c:	jl_io_printc(_jlc->jlc,
build/android/jni/src/dl.c:		jl_me_string_fnum(_jlc->jlc, _jlc->dl.current.h));
build/android/jni/src/dl.c:	jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/dl.c:	jl_io_close_block(_jlc->jlc); // }
build/android/jni/src/dl.c:	_jlc->dl.current.w = 640;
build/android/jni/src/dl.c:	_jlc->dl.current.h = 480;
build/android/jni/src/dl.c:	_jlc->dl.current.w = 480;
build/android/jni/src/dl.c:	_jlc->dl.current.h = 272;
build/android/jni/src/dl.c:	jl_me_alloc(_jlc->jlc, (void**)&_jlc->dl.displayWindow,
build/android/jni/src/dl.c:	_jlc->dl.displayWindow->w = SDL_CreateWindow(
build/android/jni/src/dl.c:		_jlc->dl.current.w, _jlc->dl.current.h,	// width and height
build/android/jni/src/dl.c:	if(_jlc->dl.displayWindow == NULL)
build/android/jni/src/dl.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/dl.c:	_jlc->dl.displayWindow->c =
build/android/jni/src/dl.c:		SDL_GL_CreateContext(_jlc->dl.displayWindow->w);
build/android/jni/src/dl.c:	jl_gl_clear(_jlc->jlc, 2, 255, 5, 255);
build/android/jni/src/dl.c:	_jlc->dl.whichwindow = 0;
build/android/jni/src/dl.c:	_jlc->dl.fullscreen = 0;
build/android/jni/src/dl.c:	if(_jlc->dl.whichwindow != which) {
build/android/jni/src/dl.c:		SDL_GL_MakeCurrent(which->w, _jlc->dl.displayWindow->c);
build/android/jni/src/dl.c:		_jlc->dl.whichwindow = which;
build/android/jni/src/dl.c:	jl_me_alloc(_jlc->jlc, (void**)&window, sizeof(jl_window_t), 0);
build/android/jni/src/dl.c:	SDL_RaiseWindow(_jlc->dl.displayWindow->w);
build/android/jni/src/dl.c:	SDL_GL_SwapWindow(_jlc->dl.displayWindow->w); //end current draw
build/android/jni/src/dl.c:	jl_gl_clear(_jlc->jlc, 2, 5, 255, 255);
build/android/jni/src/dl.c:	_jlc->dl.full_w = x;
build/android/jni/src/dl.c:	_jlc->dl.full_h = y;
build/android/jni/src/dl.c:	_jlc->dl.multiplyy = -2.*((float)x)/((float)y);
build/android/jni/src/dl.c:	_jlc->dl.multiplyx = 2.;
build/android/jni/src/dl.c:	_jlc->dl.shiftx = 0.;
build/android/jni/src/dl.c:	_jlc->dl.shifty = 0.;
build/android/jni/src/dl.c:		_jlc->jlc->smde = 0;
build/android/jni/src/dl.c:		_jlc->dl.multiplyy = -2.*((float)x)/((float)y);
build/android/jni/src/dl.c:		_jlc->dl.multiplyx = 2.*((float)x)/((float)offx);
build/android/jni/src/dl.c:		_jlc->dl.shiftx += ((float)offx - (float)x)/((float)offx);
build/android/jni/src/dl.c:		_jlc->dl.window.x = offx;
build/android/jni/src/dl.c:		_jlc->dl.window.y = 0.;
build/android/jni/src/dl.c:		_jlc->dl.window.w = x;
build/android/jni/src/dl.c:		_jlc->dl.window.h = y;
build/android/jni/src/dl.c:		_jlc->jlc->smde = 1;
build/android/jni/src/dl.c:			_jlc->dl.shifty += ((float)offy-(float)y)/((float)offy);
build/android/jni/src/dl.c:			_jlc->dl.window.x = 0.;
build/android/jni/src/dl.c:			_jlc->dl.window.y = (offy) / 2.;
build/android/jni/src/dl.c:			_jlc->dl.window.w = x;
build/android/jni/src/dl.c:			_jlc->dl.window.h = y / 2.;
build/android/jni/src/dl.c:			_jlc->dl.window.x = 0.;
build/android/jni/src/dl.c:			_jlc->dl.window.y = y / 2.;
build/android/jni/src/dl.c:			_jlc->dl.window.w = x;
build/android/jni/src/dl.c:			_jlc->dl.window.h = y / 2.;
build/android/jni/src/dl.c:		_jlc->jlc->smde = 0;
build/android/jni/src/dl.c:		_jlc->dl.shifty += ((float)offy-(float)y)/((float)offy);
build/android/jni/src/dl.c:		_jlc->dl.window.x = 0.;
build/android/jni/src/dl.c:		_jlc->dl.window.y = offy;
build/android/jni/src/dl.c:		_jlc->dl.window.w = x;
build/android/jni/src/dl.c:		_jlc->dl.window.h = y;
build/android/jni/src/dl.c:		_jlc->jlc->smde = 0;
build/android/jni/src/dl.c:		_jlc->dl.window.x = 0.;
build/android/jni/src/dl.c:		_jlc->dl.window.y = 0.;
build/android/jni/src/dl.c:		_jlc->dl.window.w = x;
build/android/jni/src/dl.c:		_jlc->dl.window.h = y;
build/android/jni/src/dl.c:	_jlc->dl.current.w = x;
build/android/jni/src/dl.c:	_jlc->dl.current.h = y + (x - y);
build/android/jni/src/dl.c:	_jlc->dl.aspect = ((double)y) / ((double)x);
build/android/jni/src/dl.c:	jl_gl_clear(_jlc->jlc, 122, 255, 125, 255);
build/android/jni/src/dl.c:		_jlc->dl.windowTitle[0][ii] = name->data[ii];
build/android/jni/src/dl.c:	_jlc->dl.windowTitle[0][15] = '\0';
build/android/jni/src/dl.c:	if(_jlc->dl.displayWindow)
build/android/jni/src/dl.c:	 SDL_SetWindowTitle(_jlc->dl.displayWindow->w, _jlc->dl.windowTitle[0]);
build/android/jni/src/dl.c:	_jl_dl_resz(_jlc, _jlc->dl.current.w, _jlc->dl.current.h);
build/android/jni/src/dl.c:	jl_io_printc(_jlc->jlc, "killing SDL...\n");
build/android/jni/src/dl.c:	if (_jlc->dl.displayWindow->c != NULL) {
build/android/jni/src/dl.c:		SDL_free(_jlc->dl.displayWindow->c);
build/android/jni/src/dl.c:		SDL_free(_jlc->dl.displayWindow->w);
build/android/jni/src/dl.c:	jl_io_printc(_jlc->jlc, "killed SDL!\n");
build/android/jni/src/fl.c:		jl_me_strt_merg(_jlc->jlc, converted, _jlc->fl.separator);
build/android/jni/src/fl.c:		jl_me_strt_merg(_jlc->jlc, converted, append);
build/android/jni/src/fl.c:			jl_me_strt_merg(_jlc->jlc,converted,_jlc->fl.separator);
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, "Get external storage directory.\n");
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, "Append JL_ROOT_DIR.\n");
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, "Merging root_path and root_dir.\n");
build/android/jni/src/fl.c:	jl_me_strt_merg(_jlc->jlc, root_path, root_dir);
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, "Free root_dir.\n");
build/android/jni/src/fl.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/fl.c:	if(jl_fl_mkdir(_jlc->jlc, (str_t) root_path->data) == 2) {
build/android/jni/src/fl.c:		jl_io_printc(_jlc->jlc, (str_t) root_path->data);
build/android/jni/src/fl.c:		jl_io_printc(_jlc->jlc, ": mkdir : Permission Denied\n");
build/android/jni/src/fl.c:		jl_sg_kill(_jlc->jlc);
build/android/jni/src/fl.c:	_jlc->fl.paths.root = jl_me_string_fstrt(_jlc->jlc, root_path);
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, "Root Path=\"");
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, _jlc->fl.paths.root);
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, "\"\n");
build/android/jni/src/fl.c:	strt errfs = jl_me_strt_mkfrom_str(_jlc->fl.paths.root);
build/android/jni/src/fl.c:	jl_me_strt_merg(_jlc->jlc, errfs, fname);
build/android/jni/src/fl.c:	_jlc->fl.paths.errf = jl_me_string_fstrt(_jlc->jlc, errfs);
build/android/jni/src/fl.c:	if(!_jlc->has.filesys) {
build/android/jni/src/fl.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "ERRF");
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, "saving to errf: ");
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, _jlc->fl.paths.errf);
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, "\n");
build/android/jni/src/fl.c:	jl_io_offset(_jlc->jlc, JL_IO_MINIMAL, "ERRF");
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, msg);
build/android/jni/src/fl.c:	jl_io_offset(_jlc->jlc, JL_IO_SIMPLE, "ERRF");
build/android/jni/src/fl.c:	_jl_fl_save(_jlc->jlc, msg, _jlc->fl.paths.errf, strlen(msg));
build/android/jni/src/fl.c:	jl_io_printc(_jlc->jlc, "saved to errf!\n");
build/android/jni/src/fl.c:	jl_io_close_block(_jlc->jlc); //Close Block "ERRF"
build/android/jni/src/fl.c:	strt resloc = jl_me_strt_mkfrom_str(_jlc->fl.paths.root);
build/android/jni/src/fl.c:	_jlc->fl.dirname = dirname;
build/android/jni/src/fl.c:	_jlc->fl.cursor = 0;
build/android/jni/src/fl.c:	_jlc->fl.cpage = 0;
build/android/jni/src/fl.c:	converted_filename = jl_fl_convert__(jlc, _jlc->fl.dirname);
build/android/jni/src/fl.c:	cl_list_clear(_jlc->fl.filelist);
build/android/jni/src/fl.c:	printf("dirname=%s:%s\n", _jlc->fl.dirname, converted_filename);
build/android/jni/src/fl.c:			cl_list_add(_jlc->fl.filelist, element);
build/android/jni/src/fl.c:		jl_cl_list_alphabetize(_jlc->fl.filelist);
build/android/jni/src/fl.c:			_jlc->fl.returnit = 1;
build/android/jni/src/fl.c:			_jlc->fl.dirname[strlen(dirname)-1] = '\0';
build/android/jni/src/fl.c:			_jlc->fl.inloop = 0;
build/android/jni/src/fl.c:	_jlc->fl.returnit = 0;
build/android/jni/src/fl.c:	_jlc->fl.inloop = 1;
build/android/jni/src/fl.c:	_jlc->fl.newfiledata = newfiledata;
build/android/jni/src/fl.c:	_jlc->fl.newfilesize = newfilesize;
build/android/jni/src/fl.c:	_jlc->fl.prompt = 0;
build/android/jni/src/fl.c:	_jlc->fl.promptstring = NULL;
build/android/jni/src/fl.c:		if((_jlc->fl.cursor > 0) || _jlc->fl.cpage) _jlc->fl.cursor--;
build/android/jni/src/fl.c:		if(_jlc->fl.cursor + (_jlc->fl.cpage * (_jlc->fl.drawupto+1)) <
build/android/jni/src/fl.c:			cl_list_count(_jlc->fl.filelist) - 1)
build/android/jni/src/fl.c:			_jlc->fl.cursor++;
build/android/jni/src/fl.c:		strlen(_jlc->fl.dirname) +
build/android/jni/src/fl.c:	memcpy(newdir, _jlc->fl.dirname,
build/android/jni/src/fl.c:		strlen(_jlc->fl.dirname));
build/android/jni/src/fl.c:	memcpy(newdir + strlen(_jlc->fl.dirname),
build/android/jni/src/fl.c:	newdir[strlen(_jlc->fl.dirname) +
build/android/jni/src/fl.c:	newdir[strlen(_jlc->fl.dirname) +
build/android/jni/src/fl.c:	char *newdir = _jl_fl_full_fname(jlc, _jlc->fl.dirname, selecteditem);
build/android/jni/src/fl.c:	free(_jlc->fl.dirname);
build/android/jni/src/fl.c:	_jlc->fl.dirname = NULL;
build/android/jni/src/fl.c:		iterator = cl_list_iterator_create(_jlc->fl.filelist);
build/android/jni/src/fl.c:		for(i = 0; i < cl_list_count(_jlc->fl.filelist); i++) {
build/android/jni/src/fl.c:				_jlc->fl.cursor + //ON PAGE
build/android/jni/src/fl.c:				(_jlc->fl.cpage * (_jlc->fl.drawupto+1))) //PAGE
build/android/jni/src/fl.c:				_jlc->fl.selecteditem = stringtoprint;
build/android/jni/src/fl.c:		if(strcmp(_jlc->fl.selecteditem, "..") == 0) {
build/android/jni/src/fl.c:			for(i = strlen(_jlc->fl.dirname)-2; i > 0; i--) {
build/android/jni/src/fl.c:				if(_jlc->fl.dirname[i] == '/') break;
build/android/jni/src/fl.c:				else _jlc->fl.dirname[i] = '\0';
build/android/jni/src/fl.c:			_jl_fl_user_select_open_dir(jlc,_jlc->fl.dirname);
build/android/jni/src/fl.c:		}else if(strcmp(_jlc->fl.selecteditem, ".") == 0) {
build/android/jni/src/fl.c:			_jlc->fl.inloop = 0;
build/android/jni/src/fl.c:			_jl_fl_open_file(jlc, _jlc->fl.selecteditem);
build/android/jni/src/fl.c:	_jlc->fl.drawupto = ((int)(20.f * jl_gl_ar(jlc))) - 1;
build/android/jni/src/fl.c:	iterator = cl_list_iterator_create(_jlc->fl.filelist);
build/android/jni/src/fl.c:	for(i = 0; i < cl_list_count(_jlc->fl.filelist); i++) {
build/android/jni/src/fl.c:		if(i - (_jlc->fl.cpage * (_jlc->fl.drawupto+1)) >= 0)
build/android/jni/src/fl.c:				.08 + (jlc->font.size * (i - (_jlc->fl.cpage * (
build/android/jni/src/fl.c:					_jlc->fl.drawupto+1)))), 0. },
build/android/jni/src/fl.c:		if(i - (_jlc->fl.cpage * (_jlc->fl.drawupto+1)) >
build/android/jni/src/fl.c:			_jlc->fl.drawupto - 1)
build/android/jni/src/fl.c:	if(_jlc->fl.cursor > _jlc->fl.drawupto) {
build/android/jni/src/fl.c:		_jlc->fl.cursor = 0;
build/android/jni/src/fl.c:		_jlc->fl.cpage++;
build/android/jni/src/fl.c:	if(_jlc->fl.cursor < 0) {
build/android/jni/src/fl.c:		_jlc->fl.cursor = _jlc->fl.drawupto;
build/android/jni/src/fl.c:		_jlc->fl.cpage--;
build/android/jni/src/fl.c:	if(_jlc->fl.prompt) {
build/android/jni/src/fl.c:			&_jlc->fl.promptstring))
build/android/jni/src/fl.c:				_jlc->fl.dirname,
build/android/jni/src/fl.c:				(char*)_jlc->fl.promptstring->data);
build/android/jni/src/fl.c:			jl_fl_save(jlc, _jlc->fl.newfiledata,
build/android/jni/src/fl.c:				name, _jlc->fl.newfilesize);
build/android/jni/src/fl.c:			_jl_fl_user_select_open_dir(jlc, _jlc->fl.dirname);
build/android/jni/src/fl.c:			_jlc->fl.prompt = 0;
build/android/jni/src/fl.c:			.02, .08 + (.04 * _jlc->fl.cursor), 0. },
build/android/jni/src/fl.c:		jl_gr_draw_text(jlc, _jlc->fl.dirname,
build/android/jni/src/fl.c:	jl_gr_sp_rnl(jlc, _jlc->fl.btns[0]);
build/android/jni/src/fl.c:	jl_gr_sp_rnl(jlc, _jlc->fl.btns[1]);
build/android/jni/src/fl.c:	if(_jlc->fl.returnit)
build/android/jni/src/fl.c:		return _jlc->fl.dirname;
build/android/jni/src/fl.c:	_jlc->fl.prompt = 1;
build/android/jni/src/fl.c:	if(!_jlc->fl.newfiledata) return;
build/android/jni/src/fl.c:	jl_gr_draw_glow_button(jlc, _jlc->fl.btns[0], "+ New File",
build/android/jni/src/fl.c:	jl_gr_vos_image(jlc, _jlc->gl.temp_vo, rc, 0, JL_IMGI_ICON, 9, 255);
build/android/jni/src/fl.c:	